# This file is automatically generated. See `src/frontend/test_runner/README.md` for more information.
- sql: |
    select generate_series('2'::INT,'10'::INT,'2'::INT);
  batch_plan: |
    BatchProject { exprs: [$1] }
      BatchProjectSet { select_list: [Generate('2':Varchar::Int32, '10':Varchar::Int32, '2':Varchar::Int32)] }
        BatchValues { rows: [[]] }
- sql: |
    select unnest(Array[1,2,3]);
  batch_plan: |
    BatchProject { exprs: [$1] }
      BatchProjectSet { select_list: [Unnest(Array(1:Int32, 2:Int32, 3:Int32))] }
        BatchValues { rows: [[]] }
- sql: |
    select unnest(Array[Array[1,2,3], Array[4,5,6]]);
  batch_plan: |
    BatchProject { exprs: [$1] }
      BatchProjectSet { select_list: [Unnest(Array(Array(1:Int32, 2:Int32, 3:Int32), Array(4:Int32, 5:Int32, 6:Int32)))] }
        BatchValues { rows: [[]] }
- sql: |
    create table t(x int[]);
    select unnest(x) as unnest from t;
  batch_plan: |
    BatchProject { exprs: [$1] }
      BatchExchange { order: [], dist: Single }
        BatchProjectSet { select_list: [Unnest($1)] }
          BatchScan { table: t, columns: [_row_id, x] }
  stream_plan: |
    StreamMaterialize { columns: [projected_row_id(hidden), unnest, t._row_id(hidden)], pk_columns: [t._row_id, projected_row_id] }
      StreamProjectSet { select_list: [Unnest($1), $0] }
        StreamTableScan { table: t, columns: [_row_id, x], pk_indices: [0] }
- sql: |
    /* table functions used with usual expressions */
    create table t(x int[]);
    select unnest(x), 1 from t;
  batch_plan: |
    BatchProject { exprs: [$1, $2] }
      BatchExchange { order: [], dist: Single }
        BatchProjectSet { select_list: [Unnest($1), 1:Int32] }
          BatchScan { table: t, columns: [_row_id, x] }
- sql: |
    /* multiple table functions */
    create table t(x int[]);
    select unnest(x), unnest(Array[1,2]) from t;
  batch_plan: |
    BatchProject { exprs: [$1, $2] }
      BatchExchange { order: [], dist: Single }
        BatchProjectSet { select_list: [Unnest($1), Unnest(Array(1:Int32, 2:Int32))] }
          BatchScan { table: t, columns: [_row_id, x] }
- sql: |
    /* table functions as parameters of usual functions */
    create table t(x int);
    select -generate_series(x,x,x) from t;
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [Neg($3)] }
        BatchProjectSet { select_list: [$0, $1, Generate($1, $1, $1)] }
          BatchScan { table: t, columns: [_row_id, x] }
- sql: |
    /* table functions as parameters of usual functions */
    create table t(x int[]);
    select unnest(x) * unnest(x) as a, unnest(x) as b from t;
  batch_plan: |
    BatchProject { exprs: [$1, $2] }
      BatchExchange { order: [], dist: Single }
        BatchProjectSet { select_list: [($3 * $4), Unnest($2)] }
          BatchProjectSet { select_list: [$0, $1, Unnest($1), Unnest($1)] }
            BatchScan { table: t, columns: [_row_id, x] }
  stream_plan: |
    StreamMaterialize { columns: [projected_row_id(hidden), a, b, t._row_id(hidden), projected_row_id#1(hidden)], pk_columns: [t._row_id, projected_row_id#1, projected_row_id] }
      StreamProjectSet { select_list: [($3 * $4), Unnest($2), $1, $0] }
        StreamProjectSet { select_list: [$0, $1, Unnest($1), Unnest($1)] }
          StreamTableScan { table: t, columns: [_row_id, x], pk_indices: [0] }
- sql: |
    /* table functions as parameters of table functions */
    create table t(x int[]);
    select generate_series(unnest(x),100,1) from t;
  batch_plan: |
    BatchProject { exprs: [$1] }
      BatchExchange { order: [], dist: Single }
        BatchProjectSet { select_list: [Generate($3, 100:Int32, 1:Int32)] }
          BatchProjectSet { select_list: [$0, $1, Unnest($1)] }
            BatchScan { table: t, columns: [_row_id, x] }
