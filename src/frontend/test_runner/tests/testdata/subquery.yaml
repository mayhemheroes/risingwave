# This file is automatically generated. See `src/frontend/test_runner/README.md` for more information.
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 from (select * from t) where v2 > 1;
  logical_plan: |
    LogicalProject { exprs: [t.v1] }
      LogicalFilter { predicate: (t.v2 > 1:Int32) }
        LogicalProject { exprs: [t.v1, t.v2] }
          LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
- sql: |
    /* merge and then eliminate */
    create table t (v1 bigint, v2 double precision);
    select a1 as v1, a2 as v2 from (select v1 as a1, v2 as a2 from t);
  logical_plan: |
    LogicalProject { exprs: [t.v1, t.v2] }
      LogicalProject { exprs: [t.v1, t.v2] }
        LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
  optimized_logical_plan: |
    LogicalScan { table: t, columns: [t.v1, t.v2] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 from (select v2, v1 as v3 from t) where v2 > 1;
  binder_error: 'Item not found: Invalid column: v1'
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v3 from (select v2, v1 as v3 from t) where v2 > 1;
  logical_plan: |
    LogicalProject { exprs: [t.v1] }
      LogicalFilter { predicate: (t.v2 > 1:Int32) }
        LogicalProject { exprs: [t.v2, t.v1] }
          LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
- sql: |
    /* consecutive projects are merged */
    create table t (v1 bigint, v2 double precision);
    select v1, 2 from (select v1, v2, 1 from t);
  logical_plan: |
    LogicalProject { exprs: [t.v1, 2:Int32] }
      LogicalProject { exprs: [t.v1, t.v2, 1:Int32] }
        LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
  optimized_logical_plan: |
    LogicalProject { exprs: [t.v1, 2:Int32] }
      LogicalScan { table: t, columns: [t.v1] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t);
  logical_plan: |
    LogicalProject { exprs: [t.v1, t.v2] }
      LogicalProject { exprs: [t.v1, t.v2] }
        LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
  optimized_logical_plan: |
    LogicalScan { table: t, columns: [t.v1, t.v2] }
- sql: |
    /* joins */
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t), t;
  logical_plan: |
    LogicalProject { exprs: [t.v1, t.v2, t.v1, t.v2] }
      LogicalJoin { type: Inner, on: true, output: all }
        LogicalProject { exprs: [t.v1, t.v2] }
          LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
        LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
- sql: |
    /* table alias */
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t) as tt join t on tt.v1=t.v1;
  logical_plan: |
    LogicalProject { exprs: [t.v1, t.v2, t.v1, t.v2] }
      LogicalJoin { type: Inner, on: (t.v1 = t.v1), output: all }
        LogicalProject { exprs: [t.v1, t.v2] }
          LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
        LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
- sql: |
    /* alias less columns than available */
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t) as tt(a) join t on a=v1;
  logical_plan: |
    LogicalProject { exprs: [t.v1, t.v2, t.v1, t.v2] }
      LogicalJoin { type: Inner, on: (t.v1 = t.v1), output: all }
        LogicalProject { exprs: [t.v1, t.v2] }
          LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
        LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
- sql: |
    /* alias more columns than available */
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t) as tt(a, b, c) join t on a=v1;
  binder_error: 'Bind error: table "tt" has 2 columns available but 3 column aliases
    specified'
- sql: |
    create table t(x int);
    select * from t, (select * from t as t2 order by t.x desc) as t3;
  binder_error: 'Item not found: Invalid column: x'
- sql: |
    create table t(x int);
    select * from t, (select t.x) as t1;
  binder_error: 'Item not found: Invalid column: x'
- sql: |
    create table t(x int);
    select * from t JOIN (select t.x) as t1;
  binder_error: 'Item not found: Invalid column: x'
- sql: |
    /* We should be able to handle nested correlated subquery */
    create table ab (a int, b int);
    create table bc (b int, c int);
    create table t (v1 int, v2 varchar);
    select * from ab where exists (
      select * from bc, (
          select * from t where v1 = a
      ) as t0
    );
  logical_plan: |
    LogicalProject { exprs: [ab.a, ab.b] }
      LogicalJoin { type: LeftSemi, on: true, output: all }
        LogicalScan { table: ab, columns: [ab.a, ab.b, ab._row_id] }
        LogicalProject { exprs: [bc.b, bc.c, t.v1, t.v2] }
          LogicalJoin { type: Inner, on: true, output: all }
            LogicalScan { table: bc, columns: [bc.b, bc.c, bc._row_id] }
            LogicalProject { exprs: [t.v1, t.v2] }
              LogicalFilter { predicate: (t.v1 = CorrelatedInputRef { index: 0, correlated_id: 0 }) }
                LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
- sql: |
    /* We cannot reference columns in left table if not lateral */
    create table ab (a int, b int);
    create table bc (b int, c int);
    create table t (v1 int, v2 varchar);
    select * from ab where exists (
      select * from bc, (
          select * from t where v1 = c
      ) as t0
    );
  binder_error: 'Item not found: Invalid column: c'
- sql: |
    /* We need to ensure doubly nested reference to a left table is not permitted */
    create table ab (a int, b int);
    create table bc (b int, c int);
    create table t (v1 int, v2 int);
    select * from ab, (
      select * from bc, (
          select * from t where v1 = a
      ) as t0
    );
  binder_error: 'Item not found: Invalid column: a'
- sql: |
    create table t1 (x int, y int);
    create table t2 (x int, y int);
    select count(1) from (select min(distinct 1) from t1), t2;
  logical_plan: |
    LogicalProject { exprs: [count(1:Int32)] }
      LogicalAgg { aggs: [count(1:Int32)] }
        LogicalProject { exprs: [1:Int32] }
          LogicalJoin { type: Inner, on: true, output: all }
            LogicalProject { exprs: [min(distinct 1:Int32)] }
              LogicalAgg { aggs: [min(distinct 1:Int32)] }
                LogicalProject { exprs: [1:Int32] }
                  LogicalScan { table: t1, columns: [t1.x, t1.y, t1._row_id] }
            LogicalScan { table: t2, columns: [t2.x, t2.y, t2._row_id] }
  optimized_logical_plan: |
    LogicalAgg { aggs: [count(1:Int32)] }
      LogicalProject { exprs: [1:Int32] }
        LogicalJoin { type: Inner, on: true, output: all }
          LogicalAgg { aggs: [] }
            LogicalScan { table: t1, columns: [] }
          LogicalScan { table: t2, columns: [] }
  batch_plan: |
    BatchSimpleAgg { aggs: [count(1:Int32)] }
      BatchProject { exprs: [1:Int32] }
        BatchNestedLoopJoin { type: Inner, predicate: true, output: all }
          BatchSimpleAgg { aggs: [] }
            BatchExchange { order: [], dist: Single }
              BatchSimpleAgg { aggs: [] }
                BatchScan { table: t1, columns: [], distribution: SomeShard }
          BatchExchange { order: [], dist: Single }
            BatchScan { table: t2, columns: [], distribution: SomeShard }
